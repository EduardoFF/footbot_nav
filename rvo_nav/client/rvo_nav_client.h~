#ifndef _RVONAVCLIENT_H_
#define _RVONAVCLIENT_H_

#include <iostream>
#include <fstream>

#include <argos2/common/control_interface/ci_controller.h>
#include <argos2/common/utility/logging/argos_log.h>
#include <argos2/common/utility/argos_random.h>
#include <argos2/common/utility/datatypes/color.h>

#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_wheels_actuator.h>
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_leds_actuator.h>
#include <argos2/common/control_interface/swarmanoid/ci_range_and_bearing_actuator.h>
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_beacon_actuator.h>

#include <argos2/common/control_interface/swarmanoid/ci_range_and_bearing_sensor.h>

/* Definition of the foot-bot proximity sensor */
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_proximity_sensor.h>

#include <argos2/common/utility/argos_random.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <errno.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <sys/un.h>

#include <sys/time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//#define __USE_GNU
//#undef __USE_GNU
#include <termios.h>
#include <math.h>

/** LCM engine */
#include "lcm/lcmthread.h"

/* lcm config interface */
#include "config_lcm_handler.h"


/** NAVIGATION AND AVOIDING COLLISION */
/* Navigations agents */
#include "navigation/Agent.h"
#include "navigation/ORCAAgent.h"
#include "navigation/HRVOAgent.h"
#include "navigation/HLAgent.h"
///Additional sensors
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_encoder_sensor.h>
#include <argos2/common/control_interface/ci_wifi_sensor.h>
#include <argos2/common/control_interface/ci_wifi_actuator.h>

/* Obstacle radius */
#define OBSTACLE_RADIUS 0.12
#define ODOMETRY_CORRECTION_FACTOR_RIGHT 1
#define ODOMETRY_CORRECTION_FACTOR_LEFT 1

#ifndef FOOTBOT_LQL_SIM
#define MAX_UNIX_SOCKET_BUFFER_SIZE 512
#define MAX_UDP_SOCKET_BUFFER_SIZE 2048
class Timer; //! forward declare timer class (MyLib)
#endif
/// in ms
#define NODE_VALIDITY_THRESHOLD 1000
#define TRAFFIC_EVENT_MIN_RATE 1000
/// in steps
#define CLICK_UPDATE_INTERVAL 10
using namespace argos;
using namespace std;

#include <argos2/common/utility/datatypes/datatypes.h>

#ifndef FOOTBOT_LQL_SIM
#include "timer.h"
#endif

/// use waypoint lists instead of single waypoint for control
#define USE_WP_LIST
#ifdef USE_WP_LIST
#include "lcm/timestamped_waypoint_list_handler.h"
#endif

class MARSFootbot: public CCI_Controller {
  private:


    /// State of the robot
    typedef 
      enum RobotNavState 
    {
      STATE_INIT,
      STATE_INIT_READY,
      STATE_MOVING, 
      STATE_ARRIVED_AT_TARGET, 
      STATE_ORIENTING
    } RobotNavState;

    typedef 
      enum TrafficGenType
      {
	TRAFFIC_NONE,
	TRAFFIC_CBR,
	TRAFFIC_CBR_NOMOVE,   //! only send if not moving
	TRAFFIC_CBR_ONOFF,   //! CBR on-off
	TRAFFIC_CBR_EVENT_PROXIMITY, //! CBR with varying rate accoding
	                             //! to proximity to event 
      } TrafficGenType;

    typedef 
      enum LedsControlMode
      {
	LEDS_NONE,
	LEDS_MOBILITY,
	LEDS_RECEIVE_BLINK,
	LEDS_FIXED,
      } LedsControlMode;

    typedef 
      enum BeaconControlMode
      {
	BEACON_NONE,
	BEACON_MOBILITY,
	BEACON_MOBILITY_LETTER_DEMO,
	BEACON_RECEIVE_BLINK,
	BEACON_FIXED,
      } BeaconControlMode;
    
    struct CBREvent
    {
      CVector3 pos;
      UInt32 min_dist;
      UInt32 max_dist;
      UInt32 min_rate;
      UInt32 max_rate;
    CBREvent(double x, double y, double z, UInt32 md, UInt32 Md, UInt32 mr, UInt32 Mr):
      pos(x,y,z),min_dist(md), max_dist(Md), min_rate(mr), max_rate(Mr)
      {}
    };

   
    CARGoSRandom::CRNG* RandomGen;
    UInt32 RandomSeed;
    std::string m_MyIdStr;
    UInt64 m_Steps;

    UInt8 m_myID;
    RobotNavState m_state;
    LedsControlMode m_ledMode;
    BeaconControlMode m_beaconMode;
    CColor m_ledFixedColor;
    CColor m_beaconFixedColor;

    //! Sensors:
    CCI_RangeAndBearingSensor* m_rangeAndBearingSensor;

    //! Actuators:
    CCI_FootBotWheelsActuator* m_pcWheels;
    CCI_FootBotLedsActuator *m_ledsActuator;
    CCI_RangeAndBearingActuator* rangeAndBearingActuator;
    CCI_FootBotBeaconActuator* m_beaconActuator;

    // Internal functionality:
    //  RobotAddressType RobotIdToAddress(const string& id);
    //  RobotAddressType RobotIdToAddress(const char *id);


    void setLeds();
    void setBeacon();
    //! Communication stuff
    void initComm(TConfigurationNode& t_tree );
    //void configureComm();
    void startSending();
    void stopSending();
    bool m_imSending;
    int m_packetSize;
    TrafficGenType m_trafficGenType;
    int m_minPacketInterval;
    //! CBR (constant packet generation rate)
    int m_cbrPacketInterval;
    std::list< CBREvent > m_cbrEvents;
    
#ifndef FOOTBOT_LQL_SIM
    //! CBR ON-OFF min-max duration between toggle
    UInt32 m_cbrOnOffToggleLow;
    UInt32 m_cbrOnOffToggleHigh;
#endif

    std::map<std::string, int> m_receivedPackets;
    int m_receivedPacketsAll;
    int m_sentPackets;

    char *m_socketMsg;
#ifdef FOOTBOT_LQL_SIM
   // std::string m_socketMsgStr;
#endif
    void makeMsg();

   int nextSendInterval();
#ifndef FOOTBOT_LQL_SIM
    int m_sendSocket;              // Network socket
    int m_recvSocket;              // Network socket
    struct sockaddr_in m_remote_addr;
    std::string m_remoteHost;
    UInt16 m_remotePort;
    Timer *m_commTimer;
    char *m_rcvMsg;
    void GetNetMessages();
#else
    //! Comm in simulation
   CCI_WiFiSensor* m_pcWifiSensor;
   CCI_WiFiActuator* m_pcWifiActuator;
   int m_sendIntervalSteps;

   //!
   int m_cntSendTime;

#endif

    /** LCM engine */
    // LCM thread
    LCMThread lcmThread;

    /// make it static because in simulation robots can share the same config handler
    static TimestampedConfigMsgHandler *m_configHandler;
    void processConfig(std::string);
#ifndef USE_WP_LIST
    // LCM thread command channel
    LCMThread lcmThreadCommand;
#else
    static TimestampedWaypointListHandler *m_wpControl;
#endif
    // List of node obstacles retrieved by LCM-tracking system. The other nodes are an obstacles for me.
    map<UInt8, Node> listNodeObstacles;
    // Myself Node
    Node mySelf;

    /// NAVIGATION AND AVOIDING COLLISION 
    /// Additional sensors 
    CCI_FootBotEncoderSensor* encoderSensor;

    /// Navigation agents 
    Agent * agent;
    HLAgent hlAgent;
    ORCAAgent orcaAgent;
    HRVOAgent hrvoAgent;

    /// Local navigation
    std::string localNavigationType;
    int localNavigationIndex;

    /// Mobility parameters 
    Real axisLength;
    CVector2 position;
    CVector2 velocity;
    CRadians angle;
    CRadians angularSpeed;
    CVector2 deltaPosition;
    Real speed;
    Real m_targetMinPointDistance;
    Real m_targetOrientation; //! in degrees
    bool m_doTargetOrientation;

    /* Target -> next (x,y) point */
    CVector2 m_targetPosition;

    // Area bounds as fixed obstacles
    CVector2 originAreaCoord;
    CVector2 destinationAreaCoord;

    Real originAreaX;
    Real originAreaY;
    Real destinationAreaX;
    Real destinationAreaY;

    /** PROXIMITY SENSORS */
    /* Pointer to the foot-bot proximity sensor */
    CCI_FootBotProximitySensor* m_pcProximity;
    /* Maximum tolerance for the angle between
     * the robot heading direction and
     * the closest obstacle detected. */
    CDegrees m_cAlpha;
    /* Maximum tolerance for the proximity reading between
     * the robot and the closest obstacle.
     * The proximity reading is 0 when nothing is detected
     * and grows exponentially to 1 when the obstacle is
     * touching the robot.
     */
    Real m_fDelta;
    /* Wheel speed. */
    Real m_fWheelVelocity;
    /* Angle tolerance range to go straight.
     * It is set to [-alpha,alpha]. */
    CRange<CRadians> m_cGoStraightAngleRange;
#ifndef FOOTBOT_LQL_SIM
    //! CLICK
    struct sockaddr_un m_clickSocketAddress;
    int  m_clickSocket, nbytes, nnbytes;
    char m_clickSocketBuffer[MAX_UNIX_SOCKET_BUFFER_SIZE];
    int  m_clickUpdateCounter;

//    std::mutex m_sendFlagMutex;
    Timer *m_sendTimer, *m_cbrOnOffTimer;
    
    static void cbrOnOffCB(void *);
    static void timerCB(void *);
    void updateClick();
    void initClick();

    unsigned int nextCBROnOffToggleInterval(); 
    void toggleCBROnOff();

#endif

  public:

    /* Class constructor. */
    MARSFootbot();

    /* Class destructor. */
    virtual ~MARSFootbot() {
    }

    /// state 
    void setState(RobotNavState s);

    /** NAVIGATION AND AVOIDING COLLISION */
    /* Navigation agents */
    void setAgent(Agent &a);
    void updateAgent(Agent *a);

    /* Local navigation */
    void initLocalNavigation(TConfigurationNode& t_tree);
    void initGlobalNavigation(TConfigurationNode& t_tree);
    void initOdometry();

    static std::string getTimeStr();

#ifndef FOOTBOT_LQL_SIM
    static UInt64 getTime();
    void sendTimerFired();
    void sendPacket(char *data, UInt32 size);
#else
    UInt64 getTime();
#endif

    void setCBRPacketInterval(double rate);

    static bool isNodeValid( Node &n );
    /* Obstacles */
    void addNodesAsObstacles(map<UInt8, Node> listNodeObstacles);
    std::vector<CVector2> addAreaBounds(CVector2 bottomLeftCoord, CVector2 upperRightCoord);
    void setFixedObstacles(std::vector<CVector2> obstaclesPoints);

    /* Update navigation */
    void updateNavigation();
    void updateDesideredVelocity();
    void updateVelocity();

    /** PROXIMITY SENSORS */
    void updateVelocityProximitySensors();

    virtual void Init(TConfigurationNode& t_tree);

    virtual void ControlStep();
    virtual void Destroy();
    virtual bool IsControllerFinished() const;

    static UInt8 ConvertValueToByte(Real value);
    static Real ConvertByteToValue(UInt8 byte);
};

#endif
